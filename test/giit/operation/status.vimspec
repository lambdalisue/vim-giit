Describe giit#operation#status
  Before all
    let Path = vital#vital#import('System.Filepath')
    let scope = themis#helper('scope')
    let sfile = Path.realpath('autoload/giit/operation/status.vim')
    let sf = scope.funcs(sfile)
  End

  Describe s:parse_record()
    It can parses 'M  foo/bar/hoge.vim'
      let record = 'M  foo/bar/hoge.vim'
      let result = sf.parse_record('', record)
      let expected = {
            \ 'word': record,
            \ 'sign': 'M ',
            \ 'path': 'foo/bar/hoge.vim',
            \ 'path1': 'foo/bar/hoge.vim',
            \ 'path2': '',
            \}
      Assert Equals(result, expected)
    End

    It can parses 'UU foo/bar/hoge.vim'
      let record = 'UU foo/bar/hoge.vim'
      let result = sf.parse_record('', record)
      let expected = {
            \ 'word': record,
            \ 'sign': 'UU',
            \ 'path': 'foo/bar/hoge.vim',
            \ 'path1': 'foo/bar/hoge.vim',
            \ 'path2': '',
            \}
      Assert Equals(result, expected)
    End

    It can parse 'UU "f o o/bar/hoge.vim"'
      let record = 'UU "f o o/bar/hoge.vim"'
      let result = sf.parse_record('', record)
      let expected = {
            \ 'word': record,
            \ 'sign': 'UU',
            \ 'path': 'f o o/bar/hoge.vim',
            \ 'path1': 'f o o/bar/hoge.vim',
            \ 'path2': '',
            \}
      Assert Equals(result, expected)
    End

    It can parse 'UU test file'
      let record = 'UU test file'
      let result = sf.parse_record('', record)
      let expected = {
            \ 'word': record,
            \ 'sign': 'UU',
            \ 'path': 'test file',
            \ 'path1': 'test file',
            \ 'path2': '',
            \}
      Assert Equals(result, expected)
    End

    It can parse 'R  foo/bar/hoge.vim -> foo/bar/piyo.vim'
      let record = 'R  foo/bar/hoge.vim -> foo/bar/piyo.vim'
      let result = sf.parse_record('', record)
      let expected = {
            \ 'word': record,
            \ 'sign': 'R ',
            \ 'path': 'foo/bar/piyo.vim',
            \ 'path1': 'foo/bar/hoge.vim',
            \ 'path2': 'foo/bar/piyo.vim',
            \}
      Assert Equals(result, expected)
    End

    It can parse 'R  "f o o/bar/hoge.vim" -> "f o o/bar/piyo.vim"'
      let record = 'R  "f o o/bar/hoge.vim" -> "f o o/bar/piyo.vim"'
      let result = sf.parse_record('', record)
      let expected = {
            \ 'word': record,
            \ 'sign': 'R ',
            \ 'path': 'f o o/bar/piyo.vim',
            \ 'path1': 'f o o/bar/hoge.vim',
            \ 'path2': 'f o o/bar/piyo.vim',
            \}
      Assert Equals(result, expected)
    End
  End
End
