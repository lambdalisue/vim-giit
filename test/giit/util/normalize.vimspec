Describe giit#util#normalize
  Before all
    let Path = vital#vital#import('System.Filepath')

    let Git = vital#giit#import('Git')
    let GitInfo = vital#giit#import('Git.Info')
    let inside = g:giit#test#inside
    let outside = g:giit#test#outside
  End

  Describe #relpath()
    It returns a relative unix path in a git repository
      let git = Git.get(inside)
      let path = 'foo/bar/hoge.txt'
      let relpath = Path.realpath('foo/bar/hoge.txt')
      let abspath = Git.abspath(git, relpath)

      Assert Equals(giit#util#normalize#relpath(git, path), path)
      Assert Equals(giit#util#normalize#relpath(git, relpath), path)
      Assert Equals(giit#util#normalize#relpath(git, abspath), path)
    End

    It returns a relative unix path out a git repository
      let git = Git.get(outside)
      let path = 'foo/bar/hoge.txt'
      let relpath = Path.realpath('foo/bar/hoge.txt')
      let abspath = Git.abspath(git, relpath)

      Assert Equals(giit#util#normalize#relpath(git, path), path)
      Assert Equals(giit#util#normalize#relpath(git, relpath), path)
      Assert Equals(giit#util#normalize#relpath(git, abspath), path)
    End
  End

  Describe #abspath()
    It returns an absolute real path in a git repository
      let git = Git.get(inside)
      let path = 'foo/bar/hoge.txt'
      let relpath = Path.realpath('foo/bar/hoge.txt')
      let abspath = Git.abspath(git, relpath)

      Assert Equals(giit#util#normalize#abspath(git, path), abspath)
      Assert Equals(giit#util#normalize#abspath(git, relpath), abspath)
      Assert Equals(giit#util#normalize#abspath(git, abspath), abspath)
    End

    It returns an absolute real path out a git repository
      let git = Git.get(outside)
      let path = 'foo/bar/hoge.txt'
      let relpath = Path.realpath('foo/bar/hoge.txt')
      let abspath = Git.abspath(git, relpath)

      Assert Equals(giit#util#normalize#abspath(git, path), abspath)
      Assert Equals(giit#util#normalize#abspath(git, relpath), abspath)
      Assert Equals(giit#util#normalize#abspath(git, abspath), abspath)
    End
  End

  Describe #commit()
    It returns a common ancestor of {lhs} and {rhs} when {lhs}...{rhs} is given
      let git = Git.get(inside)
      let lhs = 'master'
      let rhs = 'develop'
      let anc = GitInfo.find_common_ancestor(git, lhs, rhs)
      Assert Equals(giit#util#normalize#commit(git, lhs . '...' . rhs), anc)
    End

    It returns {lhs} when {lhs}..{rhs} is given
      let git = Git.get(inside)
      let lhs = 'master'
      let rhs = 'develop'
      Assert Equals(giit#util#normalize#commit(git, lhs . '..' . rhs), lhs)
    End

    It returns {commit}
      let git = Git.get(inside)
      let lhs = 'master'
      Assert Equals(giit#util#normalize#commit(git, lhs), lhs)
    End
  End

  Describe #commit_for_diff()
    It returns {ancestor}..{rhs} when {lhs}...{rhs} is given
      let git = Git.get(inside)
      let lhs = 'master'
      let rhs = 'develop'
      let anc = GitInfo.find_common_ancestor(git, lhs, rhs)
      Assert Equals(
            \ giit#util#normalize#commit_for_diff(git, lhs . '...' . rhs),
            \ anc . '..' . rhs
            \)
    End

    It returns {lhs}..{rhs} when {lhs}..{rhs} is given
      let git = Git.get(inside)
      let lhs = 'master'
      let rhs = 'develop'
      Assert Equals(
            \ giit#util#normalize#commit_for_diff(git, lhs . '..' . rhs),
            \ lhs . '..' . rhs
            \)
    End

    It returns {commit}
      let git = Git.get(inside)
      let lhs = 'master'
      Assert Equals(giit#util#normalize#commit_for_diff(git, lhs), lhs)
    End
  End
End
