Describe Vim.Buffer.Doom
  Before
    let BufferDoom = vital#giit#import('Vim.Buffer.Doom')
  End

  Describe .new()
    It returns a doom instance
      let doom = BufferDoom.new('doom')
      Assert KeyExists(doom, 'name')
      Assert KeyExists(doom, 'companies')
      Assert KeyExists(doom, 'properties')
      Assert KeyExists(doom, 'involve')
      Assert KeyExists(doom, 'annihilate')
    End
  End

  Describe A doom instance
    Before
      let doom = BufferDoom.new('doom')
    End

    Describe .involve()
      It add a corresponding {bufnr} of {expr} to {companies}
        let bufnr = bufnr('%')
        call doom.involve('%')
        Assert Equals(doom.companies, [bufnr])
        Assert KeyExists(doom.properties, string(bufnr))
      End

      It assign a doom instance to the buffer variable
        call doom.involve('%')
        Assert Equals(exists('b:_vital_doom_doom'), 1)
        Assert Same(b:_vital_doom_doom, doom)
      End

      Context Cooperatative
        It close all companies when one of a company is closed
          let bufnums = []
          split Buffer1 | call add(bufnums, bufnr('%')) | call doom.involve('%')
          split Buffer2 | call add(bufnums, bufnr('%'))
          split Buffer3 | call add(bufnums, bufnr('%')) | call doom.involve('%')
          split Buffer4 | call add(bufnums, bufnr('%'))
          split Buffer5 | call add(bufnums, bufnr('%')) | call doom.involve('%')

          Assert Equals(winnr('$'), 6)
          close
          Assert Equals(bufnr('%'), bufnums[3])
          Assert Equals(winnr('$'), 3)
        End
      End
    End

    Describe .annihilate()
      It close all buffers involved except a buffer which is marked as keep
        split Buffer1 | call doom.involve('%')
        split Buffer2 | call doom.involve('%', { 'keep': 1 })
        split Buffer3 | call doom.involve('%')
        split Buffer4 | call doom.involve('%', { 'keep': 1 })
        split Buffer5 | call doom.involve('%')
        let companies = copy(doom.companies)

        call doom.annihilate()
        Assert Equals(bufwinnr(companies[0]) == -1, 1)
        Assert Equals(bufwinnr(companies[1]) == -1, 0)
        Assert Equals(bufwinnr(companies[2]) == -1, 1)
        Assert Equals(bufwinnr(companies[3]) == -1, 0)
        Assert Equals(bufwinnr(companies[4]) == -1, 1)
      End

      It close all buffers involved except a buffer which is modified
        split Buffer1 | call doom.involve('%')
        split Buffer2 | call doom.involve('%') | setlocal modified
        split Buffer3 | call doom.involve('%')
        split Buffer4 | call doom.involve('%') | setlocal modified
        split Buffer5 | call doom.involve('%')
        let companies = copy(doom.companies)

        call doom.annihilate()
        Assert Equals(bufwinnr(companies[0]) == -1, 1)
        Assert Equals(bufwinnr(companies[1]) == -1, 0)
        Assert Equals(bufwinnr(companies[2]) == -1, 1)
        Assert Equals(bufwinnr(companies[3]) == -1, 0)
        Assert Equals(bufwinnr(companies[4]) == -1, 1)
      End
    End
  End
End
