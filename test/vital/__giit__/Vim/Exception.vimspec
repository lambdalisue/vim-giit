Describe Vim.Exception
  Before
    let Console = vital#giit#import('Vim.Console')
    let Exception = vital#giit#import('Vim.Exception')
    let prefix = '^vital: Vim\.Exception: '
  End

  Describe .info()
    It returns an exception message with Info category
      Assert Match(Exception.info('foobar'), prefix . '\<Info\>')
    End
  End

  Describe .warn()
    It returns an exception message with Warning category
      Assert Match(Exception.warn('foobar'), prefix . '\<Warning\>')
    End
  End

  Describe .error()
    It returns an exception message with Error category
      Assert Match(Exception.error('foobar'), prefix . '\<Error\>')
    End
  End

  Describe .critical()
    It returns an exception message with Critical category
      Assert Match(Exception.critical('foobar'), prefix . '\<Critical\>')
    End
  End

  Describe .handle()
    It throws {exception} when {exception} does not match the pattern
      Throws /^foobar$/ Exception.handle('foobar')
      Throws /^foobar$/ Exception.handle('vital: Vim.Exception: Unknown: foobar')
    End

    It echos message part of {exception} if the category is Info
      call Console.clear()
      call Exception.handle(Exception.info('foobar'))
      let messages = join(Console.capture('messages'), "\n")
      " NOTE:
      " 'echo' is used instead of 'echomsg' so no message should be appeared
      " on 'messages' command
      Assert NotMatch(messages, '\<foobar\>')
    End

    It echomsgs message part of {exception} if the category is Warning
      call Console.clear()
      call Exception.handle(Exception.warn('foobar'))
      let messages = join(Console.capture('messages'), "\n")
      Assert Match(messages, '\<foobar\>')
    End

    It echomsgs message part of {exception} if the category is Error
      call Console.clear()
      call Exception.handle(Exception.error('foobar'))
      let messages = join(Console.capture('messages'), "\n")
      Assert Match(messages, '\<foobar\>')
    End

    It throws message part of {exception} if the category is Critical
      Throws /^foobar$/ Exception.handle(Exception.critical('foobar'))
    End

    It tries extra handlers if {exception} does not match the pattern
      Skip Write test
    End
  End

  Describe .call()
    It calls {funcref} with {args}
      function! s:test_funcref(...) abort
        let s:call_args = a:000
      endfunction
      let s:call_args = []
      let args = ['foo', 'bar']
      call Exception.call(function('s:test_funcref'), args)
      let call_args = s:call_args
      Assert Equals(call_args, args)
    End

    It calls {funcref} with {args} and {instance}
      let args = ['foo', 'bar']
      let instance = {}
      function instance.test_funcref(...) abort
        let self.call_args = a:000
      endfunction
      call Exception.call(instance.test_funcref, args, instance)
      Assert Equals(instance.call_args, args)
    End

    It handles exception when an exception of Vim.Exception has throwed
      let args = ['foo', 'bar']
      let instance = {}
      let s:Exception = Exception
      function instance.test_funcref(...) abort
        throw s:Exception.error('foo')
      endfunction
      call Console.clear()
      call Exception.call(instance.test_funcref, args, instance)
      let messages = join(Console.capture('messages'), "\n")
      Assert Match(messages, '\<foo\>')
    End
  End

  Describe .register()
    It register an extra {handler}
      Skip Write test
    End
  End

  Describe .unregister()
    It unregister an extra {handler}
      Skip Write test
    End
  End

  Describe .get_default_handler()
    It returns a default handler instance
      Skip Write test
    End
  End
End
