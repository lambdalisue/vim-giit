Describe Git.Process
  Before all
    call g:git_tester.attach(l:)
    let Path = vital#vital#import('System.Filepath')
    let Git = vital#giit#import('Git')
  End

  Before
    let GitProcess = vital#giit#import('Git.Process')
  End

  After
    call Git.expire()
  End

  Describe .bind()
    It binds methods to a {git} instance
      let git = Git.get(f_inside1)
      call GitProcess.bind(git)

      Assert KeyExists(git, 'arguments')
      Assert KeyExists(git, 'execute')
      Assert KeyExists(git, 'shell')
      Assert True(islocked('git.arguments'))
      Assert True(islocked('git.execute'))
      Assert True(islocked('git.shell'))
    End

    It does not bind if a {git} instance already has binded
      let git = Git.get(f_inside1)
      let git.arguments = 1
      let git.execute = 1
      let git.shell = 1
      call GitProcess.bind(git)

      Assert Equals(git.arguments, 1)
      Assert Equals(git.execute, 1)
      Assert Equals(git.shell, 1)
    End
  End

  Describe .get_config()
    It returns a copy of a config dictionary
      let config = GitProcess.get_config()
      Assert IsDict(config)
      Assert KeyExists(config, 'executable')

      let config2 = GitProcess.get_config()
      Assert Equals(config, config2)
      Assert NotSame(config, config2)
    End
  End

  Describe .set_config()
    Before
      let _config = GitProcess.get_config()
    End

    After
      call GitProcess.set_config(_config)
    End

    It overwrites existing config with {config}
      call GitProcess.set_config({
            \ 'executable': 'hub',
            \})
      let config = GitProcess.get_config()
      Assert Equals(config, {
            \ 'executable': 'hub',
            \})
    End

    It ignores unknown attributes
      call GitProcess.set_config({
            \ 'executable': 'hub',
            \ 'unknown_attribute': 'bar',
            \})
      let config = GitProcess.get_config()
      Assert Equals(config, {
            \ 'executable': 'hub',
            \})
    End

    It ignores missing attributes
      call GitProcess.set_config({})
      let config = GitProcess.get_config()
      Assert Equals(config, {
            \ 'executable': 'git',
            \})
    End
  End

  Describe .arguments()
    It returns arguments without -C ... option for an empty dictionary
      let git = {}
      let args = GitProcess.arguments(git)
      Assert Equals(args, [
            \ 'git',
            \ '--no-pager',
            \ '-c', 'color.ui=false',
            \ '-c', 'core.editor=false',
            \])
    End

    It returns arguments with -C ... option for a {git} instance
      let git = Git.get(f_inside1)
      let args = GitProcess.arguments(git)
      Assert Equals(args, [
            \ 'git',
            \ '--no-pager',
            \ '-c', 'color.ui=false',
            \ '-c', 'core.editor=false',
            \ '-C', git.worktree,
            \])
    End
  End

  Describe .execute()
    It executes a git command in a working tree if a {git} instance is specified
      let git = Git.get(inside)
      let args = ['rev-parse', '--show-toplevel']
      let result = GitProcess.execute(git, args)
      Assert Equals(result.success, 1, result.output)
      " NOTE:
      " git rev-parse --show-toplevel returns an UNIX path even in Windows
      " NOTE:
      " A temporary directory is symlinked in Mac OS X
      Assert Equals(result.content, [Path.unixpath(resolve(inside))])
    End

    It executes a git command in a cwd if {git} is NOT specified
      let git = {}
      let args = ['rev-parse', '--show-toplevel']
      let result = GitProcess.execute(git, args)
      Assert Equals(result.success, 1, result.output)
      " NOTE:
      " git rev-parse --show-toplevel returns an UNIX path even in Windows
      " NOTE:
      " A temporary directory is symlinked in Mac OS X
      Assert Equals(result.content, [Path.unixpath(resolve(getcwd()))])
    End
  End

  Describe .shell()
    It executes a git command via shell (!) in a {git.worktree} if {git} is specified
      let out = tempname()
      let git = Git.get(inside)
      let args = ['rev-parse', '--show-toplevel']
      let result = GitProcess.shell(git, args, {
            \ 'stdout': 1,
            \})
      " NOTE:
      " git rev-parse --show-toplevel returns an UNIX path even in Windows
      " NOTE:
      " A temporary directory is symlinked in Mac OS X
      Assert Equals(result.stdout, [Path.unixpath(resolve(inside))])
    End

    It executes a git command via shell (!) in a cwd if {git} is NOT specified
      let out = tempname()
      let git = {}
      let args = ['rev-parse', '--show-toplevel']
      let result = GitProcess.shell(git, args, {
            \ 'stdout': 1,
            \})
      " NOTE:
      " git rev-parse --show-toplevel returns an UNIX path even in Windows
      " NOTE:
      " A temporary directory is symlinked in Mac OS X
      Assert Equals(result.stdout, [Path.unixpath(resolve(getcwd()))])
    End
  End
End
