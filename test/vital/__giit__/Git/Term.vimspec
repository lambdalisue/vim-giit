Describe Git.Term
  Before
    let GitTerm = vital#giit#import('Git.Term')
  End

  Describe .validate_commit({commit})
    It fails when {commit} begin with a dot or end with the sequence .lock
      Throws /no slash-separated component can begin with/
            \ GitTerm.validate_commit('foo/.bar')
      Throws /no slash-separated component can begin with/
            \ GitTerm.validate_commit('foo/bar.lock')
    End

    It fails when {commit} contains two consective dots ..
      Throws /no two consective dots/
            \ GitTerm.validate_commit('foo..bar')
    End

    It fails when {commit} contains space, tilde ~, caret ^, or colon :
      Throws /no space, tilde \~, caret ^, or colon : are allowed/
            \ GitTerm.validate_commit('foo bar')
      Throws /no space, tilde \~, caret ^, or colon : are allowed/
            \ GitTerm.validate_commit('foo~bar')
      Throws /no space, tilde \~, caret ^, or colon : are allowed/
            \ GitTerm.validate_commit('foo^bar')
      Throws /no space, tilde \~, caret ^, or colon : are allowed/
            \ GitTerm.validate_commit('foo:bar')
    End

    It fails when {commit} contains question ?, asterisk *, or open bracket [
      Throws /no question ?, asterisk \*, or open bracket \[/
            \ GitTerm.validate_commit('foo?bar')
      Throws /no question ?, asterisk \*, or open bracket \[/
            \ GitTerm.validate_commit('foo*bar')
      Throws /no question ?, asterisk \*, or open bracket \[/
            \ GitTerm.validate_commit('foo[bar')
    End

    It fails when {commit} begin or end with a slash /, or contain multiple consective slashes
      Throw /cannot begin or end with a slash \//
            \ GitTerm.validate_commit('/foobar')
      Throw /cannot begin or end with a slash \//
            \ GitTerm.validate_commit('foobar/')
      Throw /cannot begin or end with a slash \//
            \ GitTerm.validate_commit('foo//bar')
    End

    It fails when {commit} ends with a dot
      Throws /cannot end with a dot/
            \ GitTerm.validate_commit('foobar.')
    End

    It fails when {commit} contains a sequence @{
      Throws /cannot contain a sequence/
            \ GitTerm.validate_commit('foo@{bar')
    End

    It fails when {commit} contains a backslash
      Throws /cannot contain a backslash/
            \ GitTerm.validate_commit('\')
    End
  End

  Describe .split_commitish({commitish})
    It splits an empty {commitish}
      Assert Equals(
            \ GitTerm.split_commitish(''),
            \ ['', ''],
            \)
    End

    It splits {commitish} of <refname>@{<date>}
      Assert Equals(
            \ GitTerm.split_commitish('master@{yesterday}'),
            \ ['master', '@{yesterday}'],
            \)
      Assert Equals(
            \ GitTerm.split_commitish('HEAD@{5 minutes ago}'),
            \ ['HEAD', '@{5 minutes ago}'],
            \)
    End

    It splits {commitish} of <refname>@{<n>}
      Assert Equals(
            \ GitTerm.split_commitish('master@{1}'),
            \ ['master', '@{1}'],
            \)
    End

    It splits {commitish} of @{<n>}, @{-<n>}
      Assert Equals(
            \ GitTerm.split_commitish('@{1}'),
            \ ['', '@{1}'],
            \)
      Assert Equals(
            \ GitTerm.split_commitish('@{-1}'),
            \ ['', '@{-1}'],
            \)
    End

    It splits {commitish} of <branchname>@{upstream}, @{u}
      Assert Equals(
            \ GitTerm.split_commitish('develop@{upstream}'),
            \ ['develop', '@{upstream}'],
            \)
      Assert Equals(
            \ GitTerm.split_commitish('@{u}'),
            \ ['', '@{u}'],
            \)
    End

    It splits {commitish} of <rev>^<n>
      Assert Equals(
            \ GitTerm.split_commitish('HEAD^'),
            \ ['HEAD', '^'],
            \)
      Assert Equals(
            \ GitTerm.split_commitish('v1.5.1^0'),
            \ ['v1.5.1', '^0'],
            \)
      Assert Equals(
            \ GitTerm.split_commitish('develop^^'),
            \ ['develop', '^^'],
            \)
    End

    It splits {commitish} of <rev>~<n>
      Assert Equals(
            \ GitTerm.split_commitish('HEAD~'),
            \ ['HEAD', '~'],
            \)
      Assert Equals(
            \ GitTerm.split_commitish('master~3'),
            \ ['master', '~3'],
            \)
      Assert Equals(
            \ GitTerm.split_commitish('develop~~'),
            \ ['develop', '~~'],
            \)
    End

    It splits {commitish} of <rev>^{<type>}, <rev>^{}
      Assert Equals(
            \ GitTerm.split_commitish('v0.99.8^{commit}'),
            \ ['v0.99.8', '^{commit}'],
            \)
      Assert Equals(
            \ GitTerm.split_commitish('v0.99.8^{}'),
            \ ['v0.99.8', '^{}'],
            \)
    End

    It splits {commitish} of <rev>^{/<text>}
      Assert Equals(
            \ GitTerm.split_commitish('HEAD^{/fix nasty bug}'),
            \ ['HEAD', '^{/fix nasty bug}'],
            \)
    End

    It splits {commitish} of <rev>:/<text>
      Assert Equals(
            \ GitTerm.split_commitish('HEAD:/fix nasty bug'),
            \ ['HEAD', ':/fix nasty bug'],
            \)
    End

    It splits {commitish} of <refname>
      Assert Equals(
            \ GitTerm.split_commitish('HEAD'),
            \ ['HEAD', ''],
            \)
    End

    It throws an exception when failed to split
      Throws /no space, tilde \~, caret \^, or colon : are allowed/
            \ GitTerm.split_commitish('H:E:A:D')
    End
  End

  Describe .split_treeish({treeish}[, {options}])
    It splits an empty {treeish}
      Assert Equals(
            \ GitTerm.split_treeish(''),
            \ ['', ''],
            \)
    End

    It splits {treeish} of <rev>:<path>
      Assert Equals(
            \ GitTerm.split_treeish('HEAD:README.md'),
            \ ['HEAD', 'README.md'],
            \)
      Assert Equals(
            \ GitTerm.split_treeish('develop^:autoload/giit/core.vim'),
            \ ['develop^', 'autoload/giit/core.vim'],
            \)
    End

    It splits {treeish} of :<n>:<path>
      Assert Equals(
            \ GitTerm.split_treeish(':0:README.md'),
            \ ['', 'README.md'],
            \)
      Assert Equals(
            \ GitTerm.split_treeish(':3:autoload/giit/core.vim'),
            \ ['', 'autoload/giit/core.vim'],
            \)
    End

    It splits {treeish} of :
      Assert Equals(
            \ GitTerm.split_treeish(':'),
            \ ['', ''],
            \)
    End

    It throws an exception when failed to split
      Throws /no space, tilde \~, caret \^, or colon : are allowed/
            \ GitTerm.split_treeish('H E A D:README.md')
    End
  End

  Describe .build_treeish({commitish}, {path})
    " NEED TEST
  End

  Describe .split_range({range})
    It splits an empty {range}
      Assert Equals(
            \ GitTerm.split_range(''),
            \ ['', ''],
            \)
    End

    It splits {range} of <rev1>...<rev2>
      Assert Equals(
            \ GitTerm.split_range('HEAD~4...develop'),
            \ ['HEAD~4', 'develop'],
            \)
      Assert Equals(
            \ GitTerm.split_range('...develop'),
            \ ['', 'develop'],
            \)
      Assert Equals(
            \ GitTerm.split_range('HEAD...'),
            \ ['HEAD', ''],
            \)
    End

    It splits {range} of <rev1>..<rev2>
      Assert Equals(
            \ GitTerm.split_range('HEAD~4..develop'),
            \ ['HEAD~4', 'develop'],
            \)
      Assert Equals(
            \ GitTerm.split_range('..develop'),
            \ ['', 'develop'],
            \)
      Assert Equals(
            \ GitTerm.split_range('HEAD..'),
            \ ['HEAD', ''],
            \)
    End

    It throws an exception when failed to split
      Throws /no space, tilde \~, caret \^, or colon : are allowed/
            \ GitTerm.split_range('H E A D...master')
      Throws /no space, tilde \~, caret \^, or colon : are allowed/
            \ GitTerm.split_range('HEAD...m a s t e r')
    End
  End
End
