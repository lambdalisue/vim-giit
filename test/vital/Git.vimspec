" Note:
" git worktree has introduced from Git 2.5
" https://github.com/blog/2042-git-2-5-including-multiple-worktrees-and-triangular-workflows
let s:support_worktree = get(g:git_supported, 'worktree', 1)


Describe Git
  Before all
    call g:git_tester.attach(l:)
    let Path = vital#vital#import('System.Filepath')
  End

  Before
    let Git = vital#giit#import('Git')
  End

  After
    call Git.expire()
  End

  Describe .get()
    It returns a git instance
      let git = Git.get(f_inside1)
      " Attributes
      Assert KeyExists(git, 'worktree')
      Assert KeyExists(git, 'repository')
      Assert KeyExists(git, 'commondir')
      Assert True(islocked('git.worktree'))
      Assert True(islocked('git.repository'))
      Assert True(islocked('git.commondir'))

      " Namespace
      Assert KeyExists(git, 'cache')
      Assert True(islocked('git.cache'))
      call git.cache.set('foo', 'bar')

      " Methods
      Assert KeyExists(git, 'expire')
      Assert KeyExists(git, 'relpath')
      Assert KeyExists(git, 'abspath')
      Assert True(islocked('git.expire'))
      Assert True(islocked('git.relpath'))
      Assert True(islocked('git.abspath'))
    End

    Context in a working tree of a git repository
      It returns a cached git instance for same {path}
        let git1 = Git.get(f_inside1)
        let git2 = Git.get(f_inside1)
        Assert Equals(git1, git2)
        Assert Same(git1, git2)

        let git1 = Git.get(d_inside1)
        let git2 = Git.get(d_inside1)
        Assert Equals(git1, git2)
        Assert Same(git1, git2)
      End

      It returns a cached git instance for {path} which belongs to a same git working tree
        let git1 = Git.get(f_inside1)
        let git2 = Git.get(d_inside1)
        Assert Equals(git1, git2)
        Assert Same(git1, git2)
      End
    End

    Context in a .git directory of a git repository
      It returns a cached git instance for same {path}
        let git1 = Git.get(Path.join(inside, '.git', 'index'))
        let git2 = Git.get(Path.join(inside, '.git', 'index'))
        Assert Equals(git1, git2)
        Assert Same(git1, git2)

        let git1 = Git.get(Path.join(inside, '.git', 'refs'))
        let git2 = Git.get(Path.join(inside, '.git', 'refs'))
        Assert Equals(git1, git2)
        Assert Same(git1, git2)
      End

      It returns a cached git instance for {path} which belongs to a same git working tree
        let git1 = Git.get(Path.join(inside, '.git', 'index'))
        let git2 = Git.get(Path.join(inside, '.git', 'refs'))
        Assert Equals(git1, git2)
        Assert Same(git1, git2)
      End
    End

    Context out of a git repository
      It returns an empty dictionary
        let git = Git.get(f_outside1)
        Assert Equals(git, {})

        let git = Git.get(d_outside1)
        Assert Equals(git, {})
      End

      It returns a cached empty dictionary for same {path}
        let git1 = Git.get(f_outside1)
        let git2 = Git.get(f_outside1)
        Assert Equals(git1, git2)
        Assert Same(git1, git2)

        let git1 = Git.get(d_outside1)
        let git2 = Git.get(d_outside1)
        Assert Equals(git1, git2)
        Assert Same(git1, git2)
      End

      It returns a NOT same empty dictionary for individual {path}
        let git1 = Git.get(f_outside1)
        let git2 = Git.get(d_outside1)
        Assert Equals(git1, git2)
        Assert NotSame(git1, git2)
      End
    End

    if s:support_worktree
      Context in a sub worktree directory of a git repository (git worktree)
        It returns a cached git instance for same {path}
          let git1 = Git.get(f_worktree1)
          let git2 = Git.get(f_worktree1)
          Assert Equals(git1, git2)
          Assert Same(git1, git2)

          let git1 = Git.get(d_inside1)
          let git2 = Git.get(d_inside1)
          Assert Equals(git1, git2)
          Assert Same(git1, git2)
        End

        It returns a cached git instance for {path} which belongs to a same git working tree
          let git1 = Git.get(f_inside1)
          let git2 = Git.get(d_inside1)
          Assert Equals(git1, git2)
          Assert Same(git1, git2)
        End
      End
    endif
  End

  Describe .expire()
    It expires a {git} instance, namely remove all cahced instances
      let git1 = Git.get(f_inside1)
      let git2 = Git.get(f_inside1)
      call Git.expire(git1)
      let git3 = Git.get(f_inside1)

      Assert Equals(git1, git2)
      Assert Equals(git1, git3)
      Assert Same(git1, git2)
      Assert NotSame(git1, git3)

      let git1 = Git.get(f_inside1)
      let git2 = Git.get(d_inside1)
      call Git.expire(git1)
      let git3 = Git.get(d_inside1)

      Assert Equals(git1, git2)
      Assert Equals(git1, git3)
      Assert Same(git1, git2)
      Assert NotSame(git1, git3)
    End
  End

  Describe .relpath()
    It returns an expanded real path of {abspath} if {abspath} is already a relative path
      let git = Git.get(inside)
      let relpath = Path.unixpath('foo/$USER/hoge.txt')
      let retpath = Git.relpath(git, relpath)
      Assert Equals(retpath, Path.realpath(printf('foo/%s/hoge.txt', expand('$USER'))))

      let relpath = Path.winpath('foo/$USER/hoge.txt')
      let retpath = Git.relpath(git, relpath)
      Assert Equals(retpath, Path.realpath(printf('foo/%s/hoge.txt', expand('$USER'))))
    End

    It returns an expanded real relative path of {abspath}
      let git = Git.get(inside)
      let abspath = Path.unixpath(Path.join(inside, 'foo/$USER/hoge.txt'))
      let retpath = Git.relpath(git, abspath)
      Assert Equals(retpath, Path.realpath(printf('foo/%s/hoge.txt', expand('$USER'))))

      let abspath = Path.winpath(Path.join(inside, 'foo/$USER/hoge.txt'))
      let retpath = Git.relpath(git, abspath)
      Assert Equals(retpath, Path.realpath(printf('foo/%s/hoge.txt', expand('$USER'))))
    End
  End

  Describe .abspath()
    It returns an expanded real path of a {path} if a {path} is already an absolute path
      let git = Git.get(inside)
      let abspath = Path.unixpath(Path.join(inside, 'foo/$USER/hoge.txt'))
      let retpath = Git.abspath(git, abspath)
      Assert Equals(retpath, Path.realpath(Path.join(inside, printf('foo/%s/hoge.txt', expand('$USER')))))

      let abspath = Path.winpath(Path.join(inside, 'foo/$USER/hoge.txt'))
      let retpath = Git.abspath(git, abspath)
      Assert Equals(retpath, Path.realpath(Path.join(inside, printf('foo/%s/hoge.txt', expand('$USER')))))
    End

    It returns an expanded real absolute path of a {path}
      let git = Git.get(inside)
      let relpath = Path.unixpath('foo/$USER/hoge.txt')
      let retpath = Git.abspath(git, relpath)
      Assert Equals(retpath, Path.realpath(Path.join(inside, printf('foo/%s/hoge.txt', expand('$USER')))))

      let relpath = Path.winpath('foo/$USER/hoge.txt')
      let retpath = Git.abspath(git, relpath)
      Assert Equals(retpath, Path.realpath(Path.join(inside, printf('foo/%s/hoge.txt', expand('$USER')))))
    End
  End
End
