function! s:touch(filename) abort
  let content = readfile(a:filename, 'b')
  call writefile([], a:filename, 'b')
  call writefile(content, a:filename, 'b')
endfunction

" Note:
" git worktree has introduced from Git 2.5
" https://github.com/blog/2042-git-2-5-including-multiple-worktrees-and-triangular-workflows
let s:support_worktree = get(g:git_supported, 'worktree', 1)


Describe Git.Core
  Before all
    call g:git_tester.attach(l:)
    let Path = vital#vital#import('System.Filepath')
    let Git = vital#giit#import('Git')
  End

  Before
    let GitCore = vital#giit#import('Git.Core')
  End

  After
    call Git.expire()
  End

  Describe .bind()
    It binds methods to a {git} instance
      let git = Git.get(f_inside1)
      call GitCore.bind(git)

      Assert KeyExists(git, 'core')
      Assert KeyExists(git.core, 'expand')
      Assert KeyExists(git.core, 'readfile')
      Assert KeyExists(git.core, 'readline')
      Assert KeyExists(git.core, 'filereadable')
      Assert KeyExists(git.core, 'isdirectory')
      Assert KeyExists(git.core, 'getftime')
      Assert KeyExists(git.core, 'get_cached_content')
      Assert KeyExists(git.core, 'set_cached_content')
      Assert True(islocked('git.core'))
      Assert True(islocked('git.core.expand'))
      Assert True(islocked('git.core.readfile'))
      Assert True(islocked('git.core.readline'))
      Assert True(islocked('git.core.filereadable'))
      Assert True(islocked('git.core.isdirectory'))
      Assert True(islocked('git.core.getftime'))
      Assert True(islocked('git.core.get_cached_content'))
      Assert True(islocked('git.core.set_cached_content'))
    End

    It does not bind if a {git} instance already has binded
      let git = Git.get(f_inside1)
      let git.core = {}
      call GitCore.bind(git)

      Assert KeyExists(git, 'core')
      Assert KeyNotExists(git.core, 'expand')
      Assert KeyNotExists(git.core, 'readfile')
      Assert KeyNotExists(git.core, 'readline')
      Assert KeyNotExists(git.core, 'filereadable')
      Assert KeyNotExists(git.core, 'isdirectory')
      Assert KeyNotExists(git.core, 'getftime')
      Assert KeyNotExists(git.core, 'get_cached_content')
      Assert KeyNotExists(git.core, 'set_cached_content')
    End
  End

  Describe .expand()
    It throws an exception when {relpath} is already an absolute path
      let git = Git.get(f_inside1)
      let abspath = Path.join(inside, '.git', 'config')
      Throws /It requires a relative path/ GitCore.expand(git, abspath)
    End

    It returns an expanded real absolute path of {relpath} in .git directory
      let git = Git.get(f_inside1)
      let relpath = Path.unixpath('$USER/config')
      let abspath = Path.join(inside, expand('.git/$USER/config'))
      Assert Equals(GitCore.expand(git, relpath), abspath)

      let git = Git.get(f_inside1)
      let relpath = Path.winpath('$USER/config')
      let abspath = Path.join(inside, expand('.git/$USER/config'))
      Assert Equals(GitCore.expand(git, relpath), abspath)
    End

    if s:support_worktree
      It returns an absolute path in a commondir instead if the file/directory is missing
        let git = Git.get(f_worktree1)

        " A file which exists in a coresitory of a worktree
        let relpath = Path.unixpath('.git/worktrees/worktree/commondir')
        let abspath = Path.join(inside, Path.realpath(relpath))
        Assert Equals(GitCore.expand(git, 'commondir'), abspath)
        let relpath = Path.winpath('.git/worktrees/worktree/commondir')
        let abspath = Path.join(inside, Path.realpath(relpath))
        Assert Equals(GitCore.expand(git, 'commondir'), abspath)

        " A file which exists in a commondir
        let relpath = Path.unixpath('.git/description')
        let abspath = Path.join(inside, Path.realpath(relpath))
        Assert Equals(GitCore.expand(git, 'description'), abspath)
        let relpath = Path.winpath('.git/description')
        let abspath = Path.join(inside, Path.realpath(relpath))
        Assert Equals(GitCore.expand(git, 'description'), abspath)
      End
    endif
  End

  Describe .readfile()
    It throws an exception when {relpath} is already an absolute path
      let git = Git.get(f_inside1)
      let abspath = Path.join(inside, '.git', 'config')
      Throws /It requires a relative path/ GitCore.readfile(git, abspath)
    End

    It returns a contents list of {relpath} found in .git
      let git = Git.get(f_inside1)
      let content = readfile(Path.join(inside, '.git', 'config'))
      Assert Equals(GitCore.readfile(git, 'config'), content)
    End

    It returns an empty list if {relpath} does not exist
      let git = Git.get(f_inside1)
      let content = []
      Assert Equals(GitCore.readfile(git, 'DOES NOT EXIST'), content)
    End
  End

  Describe .readline()
    It throws an exception when {relpath} is already an absolute path
      let git = Git.get(f_inside1)
      let abspath = Path.join(inside, '.git', 'config')
      Throws /It requires a relative path/ GitCore.readline(git, abspath)
    End

    It returns a content string of {relpath} found in .git
      let git = Git.get(f_inside1)
      let content = readfile(Path.join(inside, '.git', 'config'))[0]
      Assert Equals(GitCore.readline(git, 'config'), content)
    End

    It returns an empty string if {relpath} does not exist
      let git = Git.get(f_inside1)
      let content = ''
      Assert Equals(GitCore.readline(git, 'DOES NOT EXIST'), content)
    End
  End

  Describe .filereadable()
    It throws an exception when {relpath} is already an absolute path
      let git = Git.get(f_inside1)
      let abspath = Path.join(inside, '.git', 'config')
      Throws /It requires a relative path/ GitCore.filereadable(git, abspath)
    End

    It returns 1 if {relpath} found in .git
      let git = Git.get(f_inside1)
      Assert Equals(GitCore.filereadable(git, 'config'), 1)
    End

    It returns 0 if {relpath} does not exist in .git
      let git = Git.get(f_inside1)
      Assert Equals(GitCore.filereadable(git, 'DOES NOT EXIST'), 0)
    End
  End

  Describe .isdirectory()
    It throws an exception when {relpath} is already an absolute path
      let git = Git.get(f_inside1)
      let abspath = Path.join(inside, '.git', 'config')
      Throws /It requires a relative path/ GitCore.isdirectory(git, abspath)
    End

    It returns 1 if {relpath} found in .git
      let git = Git.get(f_inside1)
      Assert Equals(GitCore.isdirectory(git, 'refs'), 1)
    End

    It returns 0 if {relpath} does not exist in .git
      let git = Git.get(f_inside1)
      Assert Equals(GitCore.isdirectory(git, 'DOES NOT EXIST'), 0)
    End
  End

  Describe .getftime()
    It throws an exception when {relpath} is already an absolute path
      let git = Git.get(f_inside1)
      let abspath = Path.join(inside, '.git', 'config')
      Throws /It requires a relative path/ GitCore.getftime(git, abspath)
    End

    It returns ftime of {path} found in .git
      let git = Git.get(f_inside1)
      let ftime = getftime(Path.join(inside, '.git', 'config'))
      Assert Equals(GitCore.getftime(git, 'config'), ftime)
    End

    It returns -1 if {relpath} does not exist in .git
      let git = Git.get(f_inside1)
      Assert Equals(GitCore.getftime(git, 'DOES NOT EXIST'), -1)
    End
  End

 Describe .get_cached_content()
    It returns {default} when no cache for {name} and {depends} is found
      let git = Git.get(inside)
      let default1 = {}
      let default2 = {}
      let content1 = GitCore.get_cached_content(git, 'slug1', 'index', default1)
      let content2 = GitCore.get_cached_content(git, 'slug1', 'index', default2)
      Assert Equals(content1, default1)
      Assert Equals(content2, default2)
      Assert Equals(content1, content2)
      Assert Same(content1, default1)
      Assert Same(content2, default2)
      Assert NotSame(content1, content2)
    End

    It returns a cached content if a cache for {name} and {depends} is found
      let git = Git.get(inside)
      let cached = { 'foo': 'bar' }
      call GitCore.set_cached_content(git, 'slug2', 'description', cached)
      let content1 = GitCore.get_cached_content(git, 'slug2', 'description')
      let content2 = GitCore.get_cached_content(git, 'slug2', 'description')
      Assert Equals(content1, cached)
      Assert Equals(content2, cached)
      Assert Equals(content1, content2)
      Assert Same(content1, cached)
      Assert Same(content2, cached)
      Assert Same(content1, content2)
    End

    It returns {default} when a cache for {name} and {depends} is found but out-date
      let git = Git.get(inside)
      let cached = { 'foo': 'bar' }
      call GitCore.set_cached_content(git, 'slug3', 'description', cached)
      let default1 = {}
      let default2 = {}
      let content1 = GitCore.get_cached_content(git, 'slug3', 'description', default1)
      " Update dependencies
      sleep | call s:touch(Path.join(inside, '.git', 'description'))
      let content2 = GitCore.get_cached_content(git, 'slug3', 'description', default2)
      Assert Equals(content1, cached)
      Assert Equals(content2, default2)
      Assert NotEquals(content1, content2)
      Assert Same(content1, cached)
      Assert Same(content2, default2)
      Assert NotSame(content1, content2)
    End
  End

  Describe .set_cached_content()
    It update a cached content of {name} and {depends}
      let git = Git.get(inside)
      let cached = { 'foo': 'bar' }
      call GitCore.set_cached_content(git, 'slug', 'index', cached)
      let default = {} 
      let content = GitCore.get_cached_content(git, 'slug', 'index', default)
      Assert Equals(content, cached)
      Assert Same(content, cached)
    End
  End
End
